```python
import sys
import heapq

def dijkstra(graph, N, src, blocked_edge):
    dist = [float('inf')] * (N + 1)
    dist[src] = 0
    pq = [(0, src)]
    
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]:
            continue
        for v, l in graph[u]:
            if (u, v) != blocked_edge and (v, u) != blocked_edge:
                if dist[v] > dist[u] + l:
                    dist[v] = dist[u] + l
                    heapq.heappush(pq, (dist[v], v))
    
    return dist

input = sys.stdin.read
data = input().split()

idx = 0
N = int(data[idx])
M = int(data[idx + 1])
idx += 2

edges = []
graph = [[] for _ in range(N + 1)]

for _ in range(M):
    U = int(data[idx])
    V = int(data[idx + 1])
    L = int(data[idx + 2])
    edges.append((U, V, L))
    graph[U].append((V, L))
    graph[V].append((U, L))
    idx += 3

results = []

for U, V, L in edges:
    dist_for_u = dijkstra(graph, N, U, (U, V))
    if dist_for_u[V] == float('inf'):
        results.append(-1)
    else:
        results.append(dist_for_u[V])

for result in results:
    print(result)
```