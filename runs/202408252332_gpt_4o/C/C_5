```python
from collections import defaultdict, deque

def longest_hype_trail(n, parents, likes):
    graph = defaultdict(list)

    for i in range(2, n + 1):
        graph[parents[i - 2]].append(i)

    def bfs():
        max_photos = [0] * (n + 1)
        queue = deque([1])
        while queue:
            node = queue.popleft()
            for neighbor in graph[node]:
                queue.append(neighbor)
                max_photos[neighbor] = max_photos[node]
                if likes[neighbor - 1] > likes[node - 1]:
                    max_photos[neighbor] = max(max_photos[neighbor], max_photos[node] + 1)
        return max_photos

    max_photos = bfs()
    return max_photos[2:]

n = int(input())
if n == 1:
    input()  # To read the remaining line with likes
    print()
else:
    parents = list(map(int, input().split()))
    likes = list(map(int, input().split()))
    result = longest_hype_trail(n, parents, likes)
    print(' '.join(map(str, result)))
```