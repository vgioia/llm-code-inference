```python
import sys
import heapq

input = sys.stdin.read
data = input().strip().split()

# Read N and M
idx = 0
N = int(data[idx])
M = int(data[idx + 1])
idx += 2

# Initialize adjacency matrix and distances
inf = float('inf')
adj_matrix = [[inf] * N for _ in range(N)]
for i in range(N):
    adj_matrix[i][i] = 0

# Read all edges
edges = []
for _ in range(M):
    U = int(data[idx]) - 1
    V = int(data[idx + 1]) - 1
    L = int(data[idx + 2])
    adj_matrix[U][V] = L
    adj_matrix[V][U] = L
    edges.append((U, V, L))
    idx += 3

# Floyd-Warshall algorithm to find all-pairs shortest paths
dist = [[inf] * N for _ in range(N)]
for i in range(N):
    for j in range(N):
        dist[i][j] = adj_matrix[i][j]

for k in range(N):
    for i in range(N):
        for j in range(N):
            if dist[i][j] > dist[i][k] + dist[k][j]:
                dist[i][j] = dist[i][k] + dist[k][j]

# Find the shortest detour paths for each edge
results = []
for U, V, L in edges:
    shortest_detour = inf
    for k in range(N):
        if k != U and k != V:
            shortest_detour = min(shortest_detour, dist[U][k] + dist[k][V])
    
    if shortest_detour == inf:
        results.append(-1)
    else:
        results.append(shortest_detour)

# Print results
for result in results:
    print(result)
```