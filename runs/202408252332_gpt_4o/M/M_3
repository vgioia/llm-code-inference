```python
import sys
input = sys.stdin.read

def floyd_warshall(n, graph):
    dist = [row[:] for row in graph]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

def main():
    data = input().split()
    index = 0
    
    N = int(data[index])
    index += 1
    graph = []
    
    for i in range(N):
        graph.append([int(data[index + j]) for j in range(N)])
        index += N
    
    shortest_paths = floyd_warshall(N, graph)
    
    for i in range(N):
        for j in range(N):
            if shortest_paths[i][j] < graph[i][j]:
                print(-1)
                return
    
    to_remove = 0
    for i in range(N):
        for j in range(i + 1, N):
            is_redundant = False
            for k in range(N):
                if k != i and k != j and shortest_paths[i][k] + shortest_paths[k][j] == graph[i][j]:
                    is_redundant = True
                    break
            if is_redundant:
                to_remove += 1
    
    print(to_remove)

main()
```