```
import heapq
from collections import defaultdict

n, m = map(int, input().split())
graph = defaultdict(dict)
for _ in range(m):
    u, v, w = map(int, input().split())
    graph[u][v] = w
    graph[v][u] = w

def dijkstra(start, end):
    queue = [(0, start)]
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    while queue:
        (dist, current_node) = heapq.heappop(queue)
        if dist > distances[current_node]:
            continue
        for neighbor, neighbor_dist in graph[current_node].items():
            old_dist = distances[neighbor]
            new_dist = dist + neighbor_dist
            if new_dist < old_dist:
                distances[neighbor] = new_dist
                heapq.heappush(queue, (new_dist, neighbor))
    return distances.get(end, -1)

print('\n'.join(map(str, [dijkstra(*map(int, input().split())) for _ in range(m)])))
```