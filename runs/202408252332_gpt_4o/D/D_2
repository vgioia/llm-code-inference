```python
import sys
import heapq

input = sys.stdin.read
data = input().split()

N = int(data[0])
M = int(data[1])

INF = 10**9
graph = [[] for _ in range(N)]
edges = []

index = 2
for _ in range(M):
    U = int(data[index]) - 1
    V = int(data[index + 1]) - 1
    L = int(data[index + 2])
    graph[U].append((V, L))
    graph[V].append((U, L))
    edges.append((U, V, L))
    index += 3

def dijkstra(source, forbidden_edge):
    dist = [INF] * N
    dist[source] = 0
    pq = [(0, source)]
    
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]:
            continue
        
        for v, length in graph[u]:
            if (u, v) == forbidden_edge or (v, u) == forbidden_edge:
                continue
                
            new_dist = dist[u] + length
            if new_dist < dist[v]:
                dist[v] = new_dist
                heapq.heappush(pq, (new_dist, v))
    
    return dist

results = []
for U, V, L in edges:
    dist = dijkstra(U, (U, V))
    if dist[V] == INF:
        results.append(-1)
    else:
        results.append(dist[V])

for res in results:
    print(res)
```