import sys
import heapq

input = sys.stdin.read
data = input().split()
N = int(data[0])
M = int(data[1])
edges = []

graph = [[] for _ in range(N + 1)]

index = 2
for _ in range(M):
    U = int(data[index])
    V = int(data[index + 1])
    L = int(data[index + 2])
    edges.append((U, V, L))
    graph[U].append((V, L))
    graph[V].append((U, L))
    index += 3

def dijkstra(start, block_edge):
    dist = [float('inf')] * (N + 1)
    dist[start] = 0
    pq = [(0, start)]
    while pq:
        current_dist, u = heapq.heappop(pq)
        if current_dist > dist[u]:
            continue
        for v, length in graph[u]:
            if block_edge == (u, v) or block_edge == (v, u):
                continue
            if dist[u] + length < dist[v]:
                dist[v] = dist[u] + length
                heapq.heappush(pq, (dist[v], v))
    return dist
    
results = []
for U, V, L in edges:
    dist_from_u = dijkstra(U, (U, V))
    if dist_from_u[V] == float('inf'):
        results.append(-1)
    else:
        results.append(dist_from_u[V])

for result in results:
    print(result)