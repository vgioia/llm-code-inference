```python
import sys
from collections import defaultdict

def dijkstra(graph, start):
    distances = defaultdict(lambda: float('inf'))
    distances[start] = 0
    queue = [(0, start)]

    while queue:
        current_distance, current_node = min(queue)
        queue.remove((current_distance, current_node))

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                queue.append((distance, neighbor))

    return distances

def main():
    input_lines = sys.stdin.readlines()
    n, m = map(int, input_lines[0].split())

    graph = defaultdict(dict)
    edges = []

    for i in range(1, m + 1):
        u, v, l = map(int, input_lines[i].split())
        graph[u][v] = l
        graph[v][u] = l
        edges.append((u, v, l))

    for u, v, _ in edges:
        graph[u].pop(v, None)
        graph[v].pop(u, None)

        distances = dijkstra(graph, u)
        distance = distances[v]

        if distance == float('inf'):
            distance = -1

        print(distance)

        graph[u][v] = _
        graph[v][u] = _

if __name__ == "__main__":
    main()
```