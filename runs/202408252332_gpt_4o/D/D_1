```python
import sys
import heapq

input = sys.stdin.read
data = input().split()
index = 0

N = int(data[index])
index += 1
M = int(data[index])
index += 1

# Initialize distances and adjacency list
dist = [[float('inf')] * N for _ in range(N)]
G = [[] for _ in range(N)]
edges = []

for _ in range(M):
    U = int(data[index]) - 1
    index += 1
    V = int(data[index]) - 1
    index += 1
    L = int(data[index])
    index += 1
    G[U].append((V, L))
    G[V].append((U, L))
    edges.append((U, V, L))

# Compute all pairs shortest paths using Floyd-Warshall algorithm
for i in range(N):
    dist[i][i] = 0

for u in range(N):
    for v, length in G[u]:
        dist[u][v] = length
        dist[v][u] = length

for k in range(N):
    for i in range(N):
        for j in range(N):
            if dist[i][j] > dist[i][k] + dist[k][j]:
                dist[i][j] = dist[i][k] + dist[k][j]

# Calculate shortest paths avoiding each edge
result = []

for U, V, L in edges:
    min_diversion = float('inf')
    for k in range(N):
        if k != U and k != V and dist[U][k] != float('inf') and dist[k][V] != float('inf'):
            min_diversion = min(min_diversion, dist[U][k] + dist[k][V])
    
    if min_diversion == float('inf'):
        result.append(-1)
    else:
        result.append(min_diversion)

for item in result:
    print(item)
```