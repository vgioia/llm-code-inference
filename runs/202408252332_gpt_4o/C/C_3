```python
import sys
input = sys.stdin.read
from collections import defaultdict, deque

data = input().strip().split()
N = int(data[0])
parent = list(map(int, data[1:N]))
values = list(map(int, data[N-1:]))

tree = defaultdict(list)
for i, p in enumerate(parent):
    tree[p].append(i + 2)  # The node i+2 has parent p

# BFS to calculate the longest increasing path
def bfs():
    max_photos = [0] * (N + 1)
    q = deque([(1, values[0])])
    max_photos[1] = 1

    while q:
        node, max_val = q.popleft()
        for child in tree[node]:
            if values[child - 1] > max_val:  # Possible to take a photo
                max_photos[child] = max(max_photos[child], max_photos[node] + 1)
            else:
                max_photos[child] = max(max_photos[child], max_photos[node])
            q.append((child, max(values[child - 1], max_val)))
    
    return max_photos

max_photos = bfs()
print(" ".join(map(str, max_photos[2:])))
```